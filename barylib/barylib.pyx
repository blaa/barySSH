import random
from time import time
from hashlib import sha256
from array import array

from twisted.python import log

cdef class Mixer(object):
    """Mix input string so that it can be unmixed but looks random.

    Don't be mistaken. This is not the true cryptography. It is not intended
    to be the true cryptography and it really doesn't need to be (as you're
    masking a secure protocol anyhow, aren't you?)
    """

    cdef object generator
    cdef int key_length
    cdef int pos

    # TODO - use unsigned char possibly
    cdef object key

    WINDOW = 5 * 60

    # Don't use too big keys as each new connection generates this much data in RAM.
    KEY_SIZE_B = 8096

    def __init__(self, base_key):
        self._generate_key(base_key)

    @staticmethod
    def create_key_from_passphrase(str passphrase):
        "Just slow-down bruteforce attacks - simple PBKDF"
        s = time()
        # This takes around 0.5s on my i7 machine.
        cdef str base_key = passphrase
        for i in range(2 * 512*1024):
            base_key = sha256('\xF0' + str(i) + base_key + '\x0F').digest()

        log.msg("Prepared base_key in", time() - s, "[s]")
        return base_key

    def _create_prng(self, time_key):
        "Create python Mersenne Twister for support"
        # 625x 4-byte ints of MT state, see random.py for reference.
        # Mersenne Twister approach - around 1MB/s tops on my machine
        seed_str = "".join(
            sha256(str(i) + time_key + str(i)).hexdigest()
            for i in range(80)
        )
        seed_long = long(seed_str, 16)

        self.generator = random.Random(seed_long)
        del seed_str
        del seed_long

    def _generate_key(self, base_key):
        "Generate a key from the current time and a base key"

        time_window = int(time() / (self.WINDOW))
        time_key = 'S{0}A{1}Z{0}E'.format(time_window, base_key)

        self._create_prng(time_key)

        self.key_length = self.KEY_SIZE_B + self.generator.randrange(0, 1024)

        self.key = array('B', [
            self.generator.randrange(0, 255)
            for i in range(0, self.key_length)
        ])

        self.pos = time_window % self.key_length

        log.msg('Created KEY of length {} with initial pos {}'.format(self.key_length, self.pos))

    cpdef bytes mix(self, bytes s):
        "Xor input string by bytes generated by internal PRNG"
        cdef object in_s = array('B', s)
        cdef int length = len(in_s)
        cdef int i = 0
        while i < length:
            in_s[i] ^= self.key[(self.pos+i) % self.key_length]
            i += 1

        self.pos += length
        return in_s.tostring()
